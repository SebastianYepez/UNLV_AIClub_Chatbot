{"ast":null,"code":"var _jsxFileName = \"/Users/sebastian0571/Downloads/workshop-chatbot/frontend/src/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport './chatbot.css'; // Import chatbot-specific styles\nimport logo from './logo.jpg'; // Import the chatbot logo image\n\n/**\n * Chatbot Component\n * This component handles the user interface and message flow for the AI & Data Science Club Chatbot.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  // State to hold all chat messages (both user and bot)\n  const [messages, setMessages] = useState([{\n    sender: \"bot\",\n    text: \"Hello! ðŸ‘‹ I'm the AI & Data Science Club Bot. How can I help you today?\"\n  }]);\n\n  // State to track the current input value (what the user is typing)\n  const [input, setInput] = useState(\"\");\n\n  // State to track whether we are waiting for a response from the backend\n  const [waitingForResponse, setWaitingForResponse] = useState(false);\n\n  // Ref for the textarea so we can auto-resize it based on content\n  const textareaRef = useRef(null);\n\n  /**\n   * useEffect - Runs after each render, adjusts the textarea height to fit its content.\n   * This creates the \"auto-expand\" effect when the user types multiple lines.\n   */\n  useEffect(() => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n    }\n  }, [input]); // Re-run this effect whenever `input` changes\n\n  /**\n   * handleSendMessage - Called when the user sends a message (either by pressing Enter or clicking Send).\n   * This sends the user's message to the backend Flask API, updates the message list, and handles the bot's response.\n   */\n  const handleSendMessage = async () => {\n    if (input.trim() === \"\") return; // Don't send empty messages\n\n    // Add the user's message to the chat history\n    const userMessage = {\n      sender: \"user\",\n      text: input\n    };\n    setMessages(prev => [...prev, userMessage, {\n      sender: \"bot\",\n      text: \"Thinking...\"\n    }]);\n\n    // Clear the input field\n    setInput(\"\");\n    setWaitingForResponse(true); // Show the \"Waiting...\" state in the UI\n\n    try {\n      // Send the message to the Flask backend\n      const response = await fetch(\"http://127.0.0.1:5000/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: input\n        })\n      });\n\n      // Parse the response from the backend\n      const data = await response.json();\n\n      // Replace the \"Thinking...\" message with the actual bot response\n      setMessages(prev => [...prev.slice(0, prev.length - 1), {\n        sender: \"bot\",\n        text: data.response\n      }]);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n\n      // Replace \"Thinking...\" with an error message if the fetch fails\n      setMessages(prev => [...prev.slice(0, prev.length - 1), {\n        sender: \"bot\",\n        text: \"Oops! Something went wrong. Please be sure the Flask app is running, as well as LM Studio.\"\n      }]);\n    } finally {\n      setWaitingForResponse(false); // Re-enable the input after response arrives\n    }\n  };\n\n  /**\n   * handleKeyDown - Allows the user to press Enter to send a message.\n   * Shift+Enter allows for adding a newline instead.\n   */\n  const handleKeyDown = e => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  // Render the full chatbot UI\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-page\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          alt: \"Chatbot Logo\",\n          className: \"chat-logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"AI & Data Science Chatbot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          alt: \"Chatbot Logo\",\n          className: \"chat-logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-text\",\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          ref: textareaRef,\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyDown: handleKeyDown,\n          placeholder: \"Type your message...\",\n          className: \"chat-textarea\",\n          rows: 1,\n          disabled: waitingForResponse\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          className: \"send-button\",\n          disabled: waitingForResponse,\n          children: waitingForResponse ? \"Waiting...\" : \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n}\n_s(Chatbot, \"kfa5ZUPnqpZrDYTUiF9xCtCypO4=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","logo","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","sender","text","input","setInput","waitingForResponse","setWaitingForResponse","textareaRef","current","style","height","scrollHeight","handleSendMessage","trim","userMessage","prev","response","fetch","method","headers","body","JSON","stringify","message","data","json","slice","length","error","console","handleKeyDown","e","key","shiftKey","preventDefault","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","ref","value","onChange","target","onKeyDown","placeholder","rows","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/sebastian0571/Downloads/workshop-chatbot/frontend/src/Chatbot.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport './chatbot.css'; // Import chatbot-specific styles\nimport logo from './logo.jpg'; // Import the chatbot logo image\n\n/**\n * Chatbot Component\n * This component handles the user interface and message flow for the AI & Data Science Club Chatbot.\n */\nfunction Chatbot() {\n    // State to hold all chat messages (both user and bot)\n    const [messages, setMessages] = useState([\n        { sender: \"bot\", text: \"Hello! ðŸ‘‹ I'm the AI & Data Science Club Bot. How can I help you today?\" }\n    ]);\n\n    // State to track the current input value (what the user is typing)\n    const [input, setInput] = useState(\"\");\n\n    // State to track whether we are waiting for a response from the backend\n    const [waitingForResponse, setWaitingForResponse] = useState(false);\n\n    // Ref for the textarea so we can auto-resize it based on content\n    const textareaRef = useRef(null);\n\n    /**\n     * useEffect - Runs after each render, adjusts the textarea height to fit its content.\n     * This creates the \"auto-expand\" effect when the user types multiple lines.\n     */\n    useEffect(() => {\n        if (textareaRef.current) {\n            textareaRef.current.style.height = 'auto';\n            textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n        }\n    }, [input]);  // Re-run this effect whenever `input` changes\n\n    /**\n     * handleSendMessage - Called when the user sends a message (either by pressing Enter or clicking Send).\n     * This sends the user's message to the backend Flask API, updates the message list, and handles the bot's response.\n     */\n    const handleSendMessage = async () => {\n        if (input.trim() === \"\") return;  // Don't send empty messages\n\n        // Add the user's message to the chat history\n        const userMessage = { sender: \"user\", text: input };\n        setMessages(prev => [...prev, userMessage, { sender: \"bot\", text: \"Thinking...\" }]);\n\n        // Clear the input field\n        setInput(\"\");\n        setWaitingForResponse(true);  // Show the \"Waiting...\" state in the UI\n\n        try {\n            // Send the message to the Flask backend\n            const response = await fetch(\"http://127.0.0.1:5000/chat\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ message: input }),\n            });\n\n            // Parse the response from the backend\n            const data = await response.json();\n\n            // Replace the \"Thinking...\" message with the actual bot response\n            setMessages(prev => [\n                ...prev.slice(0, prev.length - 1),\n                { sender: \"bot\", text: data.response }\n            ]);\n        } catch (error) {\n            console.error(\"Error sending message:\", error);\n\n            // Replace \"Thinking...\" with an error message if the fetch fails\n            setMessages(prev => [\n                ...prev.slice(0, prev.length - 1),\n                { sender: \"bot\", text: \"Oops! Something went wrong. Please be sure the Flask app is running, as well as LM Studio.\" }\n            ]);\n        } finally {\n            setWaitingForResponse(false);  // Re-enable the input after response arrives\n        }\n    };\n\n    /**\n     * handleKeyDown - Allows the user to press Enter to send a message.\n     * Shift+Enter allows for adding a newline instead.\n     */\n    const handleKeyDown = (e) => {\n        if (e.key === \"Enter\" && !e.shiftKey) {\n            e.preventDefault();\n            handleSendMessage();\n        }\n    };\n\n    // Render the full chatbot UI\n    return (\n        <div className=\"chatbot-page\">\n            <div className=\"chat-container\">\n                {/* Header with logo and title */}\n                <header className=\"chat-header\">\n                    <img src={logo} alt=\"Chatbot Logo\" className=\"chat-logo\" />\n                    <h3>AI & Data Science Chatbot</h3>\n                    <img src={logo} alt=\"Chatbot Logo\" className=\"chat-logo\" />\n                </header>\n\n                {/* Message display area */}\n                <div className=\"chat-box\">\n                    {messages.map((msg, index) => (\n                        <div key={index} className={`message ${msg.sender}`}>\n                            <div className=\"message-text\">{msg.text}</div>\n                        </div>\n                    ))}\n                </div>\n\n                {/* Input area with growing textarea and send button */}\n                <div className=\"input-area\">\n                    <textarea\n                        ref={textareaRef}\n                        value={input}\n                        onChange={(e) => setInput(e.target.value)}\n                        onKeyDown={handleKeyDown}\n                        placeholder=\"Type your message...\"\n                        className=\"chat-textarea\"\n                        rows={1}\n                        disabled={waitingForResponse}\n                    />\n                    <button onClick={handleSendMessage} className=\"send-button\" disabled={waitingForResponse}>\n                        {waitingForResponse ? \"Waiting...\" : \"Send\"}\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}