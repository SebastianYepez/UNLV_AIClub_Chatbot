{"ast":null,"code":"var _jsxFileName = \"/Users/sebastian0571/Downloads/workshop-chatbot/frontend/src/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport './chatbot.css';\nimport logo from './logo.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const [messages, setMessages] = useState([{\n    sender: \"bot\",\n    text: \"Hello! ğŸ‘‹ I'm the AI & Data Science Club Bot. How can I help you today?\"\n  }]);\n  const [input, setInput] = useState(\"\");\n  const [waitingForResponse, setWaitingForResponse] = useState(false);\n  const textareaRef = useRef(null);\n  useEffect(() => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n    }\n  }, [input]);\n  const handleSendMessage = async () => {\n    if (input.trim() === \"\") return;\n    const userMessage = {\n      sender: \"user\",\n      text: input\n    };\n    setMessages(prev => [...prev, userMessage, {\n      sender: \"bot\",\n      text: \"Thinking...\"\n    }]); // Add \"bot is typing\"\n\n    setInput(\"\");\n    setWaitingForResponse(true);\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: input\n        })\n      });\n      const data = await response.json();\n\n      // Replace the \"...\" message with the actual response\n      setMessages(prev => [...prev.slice(0, prev.length - 1),\n      // Remove last (the \"...\")\n      {\n        sender: \"bot\",\n        text: data.response\n      }]);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      setMessages(prev => [...prev.slice(0, prev.length - 1),\n      // Remove last (the \"...\")\n      {\n        sender: \"bot\",\n        text: \"Oops! Something went wrong.\"\n      }]);\n    } finally {\n      setWaitingForResponse(false);\n    }\n  };\n  const handleKeyDown = e => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-page\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          alt: \"Chatbot Logo\",\n          className: \"chat-logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"AI & Data Science Chatbot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          alt: \"Chatbot Logo\",\n          className: \"chat-logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-text\",\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          ref: textareaRef,\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyDown: handleKeyDown,\n          placeholder: \"Type your message...\",\n          className: \"chat-textarea\",\n          rows: 1,\n          disabled: waitingForResponse // Optionally disable input while waiting\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          className: \"send-button\",\n          disabled: waitingForResponse,\n          children: waitingForResponse ? \"Waiting...\" : \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n_s(Chatbot, \"kfa5ZUPnqpZrDYTUiF9xCtCypO4=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","logo","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","sender","text","input","setInput","waitingForResponse","setWaitingForResponse","textareaRef","current","style","height","scrollHeight","handleSendMessage","trim","userMessage","prev","response","fetch","method","headers","body","JSON","stringify","message","data","json","slice","length","error","console","handleKeyDown","e","key","shiftKey","preventDefault","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","ref","value","onChange","target","onKeyDown","placeholder","rows","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/sebastian0571/Downloads/workshop-chatbot/frontend/src/Chatbot.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport './chatbot.css';\nimport logo from './logo.jpg';\n\nfunction Chatbot() {\n    const [messages, setMessages] = useState([\n        { sender: \"bot\", text: \"Hello! ğŸ‘‹ I'm the AI & Data Science Club Bot. How can I help you today?\" }\n    ]);\n    const [input, setInput] = useState(\"\");\n    const [waitingForResponse, setWaitingForResponse] = useState(false);\n\n    const textareaRef = useRef(null);\n\n    useEffect(() => {\n        if (textareaRef.current) {\n            textareaRef.current.style.height = 'auto';\n            textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n        }\n    }, [input]);\n\n    const handleSendMessage = async () => {\n        if (input.trim() === \"\") return;\n\n        const userMessage = { sender: \"user\", text: input };\n        setMessages(prev => [...prev, userMessage, { sender: \"bot\", text: \"Thinking...\" }]); // Add \"bot is typing\"\n\n        setInput(\"\");\n        setWaitingForResponse(true);\n\n        try {\n            const response = await fetch(\"http://127.0.0.1:5000/chat\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ message: input }),\n            });\n\n            const data = await response.json();\n\n            // Replace the \"...\" message with the actual response\n            setMessages(prev => [\n                ...prev.slice(0, prev.length - 1), // Remove last (the \"...\")\n                { sender: \"bot\", text: data.response }\n            ]);\n        } catch (error) {\n            console.error(\"Error sending message:\", error);\n            setMessages(prev => [\n                ...prev.slice(0, prev.length - 1), // Remove last (the \"...\")\n                { sender: \"bot\", text: \"Oops! Something went wrong.\" }\n            ]);\n        } finally {\n            setWaitingForResponse(false);\n        }\n    };\n\n    const handleKeyDown = (e) => {\n        if (e.key === \"Enter\" && !e.shiftKey) {\n            e.preventDefault();\n            handleSendMessage();\n        }\n    };\n\n    return (\n        <div className=\"chatbot-page\">\n            <div className=\"chat-container\">\n                <header className=\"chat-header\">\n                    <img src={logo} alt=\"Chatbot Logo\" className=\"chat-logo\" />\n                    <h3>AI & Data Science Chatbot</h3>\n                    <img src={logo} alt=\"Chatbot Logo\" className=\"chat-logo\" />\n                </header>\n\n                <div className=\"chat-box\">\n                    {messages.map((msg, index) => (\n                        <div key={index} className={`message ${msg.sender}`}>\n                            <div className=\"message-text\">{msg.text}</div>\n                        </div>\n                    ))}\n                </div>\n\n                <div className=\"input-area\">\n                    <textarea\n                        ref={textareaRef}\n                        value={input}\n                        onChange={(e) => setInput(e.target.value)}\n                        onKeyDown={handleKeyDown}\n                        placeholder=\"Type your message...\"\n                        className=\"chat-textarea\"\n                        rows={1}\n                        disabled={waitingForResponse} // Optionally disable input while waiting\n                    />\n                    <button onClick={handleSendMessage} className=\"send-button\" disabled={waitingForResponse}>\n                        {waitingForResponse ? \"Waiting...\" : \"Send\"}\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}